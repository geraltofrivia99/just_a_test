import React, { Component } from 'react'
import { connect } from 'react-redux'
import { Link } from 'react-router-3'
import * as R from 'ramda'
// import InfiniteScroll from 'react-infinite-scroller';

import {fetchCat} from 'api'
import {
  fetchPhones, loadMorePhones,
  addPhoneToBasket, fetchCatigories
} from 'actions'
import { getPhones, getActiveCatigoryId } from 'selectors'

class Phones extends Component {
  constructor(props) {
    super(props)
    this.state = {
      offset: 0,
      limit: 5,
      count: 10
    } 
  }
  componentDidMount() {
    this.props.fetchPhones()
    this.props.fetchCatigories()
  }

  renderPhone(phone, index) {
    const { addPhoneToBasket } = this.props
    const shortDescription = `${R.take(60, phone.description)}...`;
    return (
      <div className='col-sm-4 col-lg-4 col-md-4, book-list' key={index}>
        <div className='thumbnail'>
          <img className='img-thumbnail'
            src={phone.image}
            alt={phone.name} />
          <div className='caption'>
            <h4 className='pull-right'>${phone.price}</h4>
            <h4>
              <Link to={`/phones/${phone.id}`}>
                {phone.name}
              </Link>
            </h4>
            <p>{shortDescription}</p>
            <p className='itemButton'>
              <button
                className='btn btn-primary'
                onClick={() => addPhoneToBasket(phone.id)}
              >
                Buy Now
                </button>
              <Link
                to={`/phones/${phone.id}`}
                className='btn btn-default'>
                More Info
                </Link>
            </p>
          </div>
        </div>
      </div>
    )
  }

  
  LoadMore() {
    this.setState({
      offset: this.state.offset + this.state.limit
    })
    this.props.loadMorePhones(this.state.offset)
  }
  

  
  // renderCategoris(id){
   
  //  const rc = this.props.phones.filter(phone => phone.categoryid == id)
  //  return rc.map((ph, index)=> this.renderPhone(ph, index))
  // }

  render() {
    const { phones, ownProps } = this.props
    
    
    return (
      <div>
        {/* {ownProps.params.id && 
            <div>
              {this.renderCategoris(ownProps.params.id)}
            </div>
          } */}
        <div className='books row'>
          {phones.map((phone, index) => 
            this.renderPhone(phone, index))}
            
        </div>
        <div className='row'>
          <div className='col-md-12'>
            {/* <InfiniteScroll
              pageStart={0}
              loadMore={() => this.LoadMore()}
              hasMore={this.state.hasMore}
              loader={<div className="loader" key={0}>Loading ...</div>}
            > */}
              <button
                onClick={() => this.LoadMore()}
                className='pull-right btn btn-primary'
              >Load More</button>
            {/* </InfiniteScroll> */}
          </div>
        </div>
      </div>
    )
  }

}
const mapStateToProps = (state, ownProps) => ({
  phones: getPhones(state, ownProps),
  ownProps

})

const mapDispatchToProps = {
  fetchPhones,
  loadMorePhones,
  addPhoneToBasket,
  fetchCatigories, 
}

export default connect(mapStateToProps, mapDispatchToProps)(Phones)
// export default compose(
//   withRouter,
//   connect(mapStateToProps, mapDispatchToProps)
// )(Phones)
